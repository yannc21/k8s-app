pipelines:
  - name: suv_05_backapp_go_pipeline
    configuration:
      runtime:      
        type: image
        image:
          custom:
#            name: docker.artifactory-eu.soleng-emea-staging.jfrog.team/u16go-soleng
#            tag: 1.1.0
            name: docker.bintray.io/jfrog/pipelines-u16go
            tag: 1.13.7
            options: "-v /etc/ssl/certs/multi-domain-soleng-staging.crt:/root/.jfrog/security/multi-domain-soleng-staging.crt  -v /etc/ssl/certs/multi-domain-soleng-staging.crt:/etc/ssl/certs/multi-domain-soleng-staging.crt" 
#            registry: registry_eu
#            sourceRepository: docker
    steps:
      # Build the Go app from the GitRepo
      - name: suv_05_build_go_backapp
        type: GoBuild
        configuration:
          sourceLocation: back/
          repository: app-go
          outputLocation: /tmp/dist
          outputFile: backend
          inputResources:
            - name: suv_05_src_code_backapp
          environmentVariables:
            OFFLINE_MODE: "true"
            CGO_ENABLED: 0
          integrations:
            - name: artifactory_eu_ssl
        execution:
          onStart:
            - jfrog rt c show 
            - jfrog rt ping
            - echo "Run Unit Testing ..." 
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
            - env
            - echo ${res_suv_05_src_code_backapp_isGitTag}
          onSuccess:
            - echo ${res_src_code_backapp_isGitTag}
            - appVersion=`if [[ ${res_suv_05_src_code_backapp_isGitTag} == "true" ]]; then echo ${res_suv_05_src_code_backapp_gitTagName}; else echo ${res_suv_05_src_code_backapp_commitSha}; fi`
            - echo $appVersion 
            - add_run_variables appVersion="${appVersion}"
            - add_run_variables subPath="${res_suv_05_src_code_backapp_branchName}/${appVersion}"

      # Publish the Go app (binary) and Go Build Info to Artifactory 
      - name: suv_05_publish_go_backapp
        type: GoPublishBinary
        configuration:
          autoPublishBuildInfo: true
          targetRepository: app-generic-dev-local/${subPath}/
          inputSteps:
            - name: suv_05_build_go_backapp
          integrations:
            - name: artifactory_eu_ssl
          outputResources:
            - name: suv_05_build_info_backapp
        execution:
          onStart:
            - echo ${subPath} 
          onSuccess:
            - echo ${res_suv_05_build_info_backapp_buildName} 
            - echo ${res_suv_05_build_info_backapp_buildNumber} 

      # Scan Build Info
      - name: suv_05_scan_go_backapp
        type: XrayScan 
        configuration:
          failOnScan: false
          inputResources:
            - name: suv_05_build_info_backapp
              trigger: true
#          outputResources:
#            - name: build_info_backapp_scanned

      # Promote Go Build Info
      - name: suv_05_promote_build_info_go_backapp
        type: PromoteBuild
        configuration:
          targetRepository: app-generic-rc-local
          includeDependencies: false
          status: "SANDBOX_OK"
          comment: "Unit testing and Xray scan passed succesfully"
          copy: false
          inputResources:
            - name: suv_05_build_info_backapp
              trigger: true
          outputResources:
            - name: suv_05_build_info_backapp_promoted
          inputSteps:
            - name: suv_05_scan_go_backapp
        execution:  
          onStart:
            - echo ${res_suv_05_build_info_backapp_scanned_buildName} 
            - echo ${res_suv_05_build_info_backapp_scanned_buildNumber} 
          onSuccess:
            - write_output suv_05_build_info_backapp_promoted appversion=${appVersion}
  - name: suv_05_backapp_docker_pipeline
    configuration:
      runtime:      
        type: image
        image:
          custom:
            name: docker.bintray.io/jfrog/pipelines-u16node
            tag: 10.16.3
            options: "-v /etc/ssl/certs/multi-domain-soleng-staging.crt:/root/.jfrog/security/multi-domain-soleng-staging.crt  -v /etc/ssl/certs/multi-domain-soleng-staging.crt:/etc/ssl/certs/multi-domain-soleng-staging.crt" 
    steps:          
      - name: suv_05_build_docker_backapp
        type: DockerBuild
        configuration:
          affinityGroup: build_docker 
          dockerFileName: jfrog-Dockerfile
          dockerFileLocation: back/CI/Docker/
          dockerImageName: 'app-docker.artifactory-eu.soleng-emea-staging.jfrog.team/backapp'
          dockerImageTag: ${res_suv_05_build_info_backapp_promoted_appversion}-${res_suv_05_src_dockerfile_backapp_commitSha}
          inputResources:
            - name: suv_05_src_dockerfile_backapp
            - name: suv_05_backapp_exec
            - name: suv_05_build_info_backapp_promoted
          integrations:
            - name: artifactory_eu
            - name: yann_github
        execution:
          onStart:
            - add_run_variables triggerBuildInfoName="${res_suv_05_build_info_backapp_promoted_buildName}"
            - add_run_variables triggerBuildInfoNumber="${res_suv_05_build_info_backapp_promoted_buildNumber}"
            # - echo ${res_suv_05_backapp_exec_resourcePath}
            # - echo "Go App Build number :" 
            # - echo ${triggerBuildInfoNumber}
            # - echo "Go App version :" 
            - echo ${res_suv_05_build_info_backapp_promoted_appversion} 
            # - echo "Git repo hash :" 
            - echo ${res_suv_05_src_dockerfile_backapp_commitSha}
            # - echo "Copying exec binary to specific location..." && ls -l
            # - echo "Filespec location :" && echo ${res_suv_05_backapp_exec_resourcePath} && ls -l ${res_suv_05_backapp_exec_resourcePath}
            - cp ${res_suv_05_backapp_exec_resourcePath}/backend ${res_suv_05_src_dockerfile_backapp_resourcePath}/back/CI/Docker/
            - cd ${res_suv_05_src_dockerfile_backapp_resourcePath}/back/CI/Docker/ && curl -O "https://${int_yann_github_token}@raw.githubusercontent.com/cyan21/k8s-app/master/back/data.json"
            - ls -l ${res_suv_05_src_dockerfile_backapp_resourcePath}/back/CI/Docker
            - add_run_variables myDockerTag="${res_suv_05_build_info_backapp_promoted_appversion}-${res_suv_05_src_dockerfile_backapp_commitSha}"
          onSuccess:
            - echo "Job well done!"
      - name: suv_05_publish_docker_backapp
        type: DockerPush
        configuration:
          affinityGroup: build_docker 
          targetRepository: app-docker
          autoPublishBuildInfo: true
          inputSteps:
            - name: suv_05_build_docker_backapp
          integrations:
            - name: artifactory_eu_ssl
          outputResources:
            - name: suv_05_build_info_docker_backapp
      - name: suv_05_scan_docker_build_info_backapp
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: suv_05_build_info_docker_backapp
              trigger: true
      - name: suv_05_promote_docker_build_info_backapp
        type: PromoteBuild
        configuration:
          targetRepository: app-docker-sit-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          inputResources:
            - name: suv_05_build_info_docker_backapp
              trigger: true
          outputResources:
            - name: suv_05_build_info_docker_backapp_promoted
          inputSteps:
            - name: suv_05_scan_docker_build_info_backapp
        execution:
          onSuccess:
            - write_output suv_05_build_info_docker_backapp_promoted docker_tag=${myDockerTag}
  - name: suv_05_k8s_deploy_pipeline
    configuration:
      runtime:      
        type: image
        image:
          custom:
            name: docker.bintray.io/jfrog/pipelines-u16node
            tag: 10.16.3
            options: "-v /etc/ssl/certs/multi-domain-soleng-staging.crt:/root/.jfrog/security/multi-domain-soleng-staging.crt  -v /etc/ssl/certs/multi-domain-soleng-staging.crt:/etc/ssl/certs/multi-domain-soleng-staging.crt"
    steps:
      - name: suv_05_deploy_helm_chart
        type: HelmDeploy
        configuration:
          flags: "--set images.back.repository=app-docker.artifactory-eu.soleng-emea-staging.jfrog.team/backapp --set images.back.tag=${res_suv_05_build_info_docker_backapp_promoted_docker_tag} --set images.front.repository=app-docker.artifactory-eu.soleng-emea-staging.jfrog.team/frontapp --set images.front.tag=e8db0a7839414df41a9ad84153c168d2e449bf4f-e8db0a7839414df41a9ad84153c168d2e449bf4f --force"
          releaseName: yann-app
          dryRun: false
          lint: false
          lintFlags: "--strict"
          test: false
          testFlags: "--parallel"
          integrations:
#            - name: ych_gke
            - name : app_k8s_cluster_integration
#            - name: app_docker
            - name: artifactory_eu
          inputResources:
            - name: suv_05_app_helm_chart
            - name: suv_05_build_info_docker_backapp_promoted
#        execution:
#          onStart:
#            - helm version
#            - gcloud container clusters get-credentials yann-k8s-cluster --zone europe-west2-c --project soleng-dev
#       - name: suv_05_non_regression_testing
#         type: Bash
#         configuration:
#           inputSteps:
#             - name: deploy_helm_chart
#         execution:
#           onStart: 
#             - echo "Running non regression tests"
#           onSuccess: 
#             - echo "non regression tests done !"
#       - name: suv_05_feature_testing
#         type: Bash
#         configuration:
#           inputSteps:
#             - name: deploy_helm_chart
#         execution:
#           onStart: 
#             - echo "Running feature_1 tests"
#           onSuccess: 
#             - echo "feature_1 tests done !"
#       - name: suv_05_performance_testing
#         type: Bash
#         configuration:
#           inputSteps:
#             - name: deploy_helm_chart
#         execution:
#           onStart: 
#             - echo "Running performance tests"
#           onSuccess: 
#             - echo "performance tests done !"
