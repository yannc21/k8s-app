pipelines:
  - name: k8s_backapp_gradle
    configuration:
      environmentVariables:
        readOnly:
          envVarDockerRepo: kaizoku-docker
          envVarDockerRegistry: ${envVarDockerRepo}.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarGrdlRepo: kaizoku-grdl
          envVarGrdlPromoteRepo: kaizoku-rc-grdl-local
    steps:
      - name: build_k8s_backapp_gradle
        type: GradleBuild
        configuration: 
          environmentVariables:
            JFROG_CLI_LOG_LEVEL: DEBUG
          gradleCommand:  clean build artifactoryPublish -b build.gradle --stacktrace
          sourceLocation:       back/src/gs-rest-service  #required
          configFileLocation:   .  #required
          configFileName:       gradle-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: true #optional
          inputResources:
            - name: src_code_k8s_backapp_gradle
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_backapp_gradle
        execution:
          onStart:
            - jfrog --version
      #       - cli_path=$(dirname "$(which jfrog)") && echo $cli_path
      #       - curl -fL https://getcli.jfrog.io | sh && ls -l           
      #       - mv ./jfrog "$cli_path/" && ls -l "$cli_path/jfrog"  && jfrog --version
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/k8s_backapp_gradle/${run_number}/setup_env?branch=${res_src_code_k8s_backapp_gradle_branchName}"
          onSuccess:
            - add_run_variables runVarAppVersion=`sed -n "s/currentVersion=\(.*\)/\1/p" ${res_src_code_k8s_backapp_gradle_resourcePath}/back/src/gradle.properties`
            - add_run_variables runVarGitCommit=${res_src_code_k8s_backapp_gradle_commitSha}
            - echo $runVarAppVersion
            - echo $runVarGitCommit
            - jfrog rt sp --build=${res_bi_k8s_backapp_gradle_buildName}/${run_number}  --exclusions="*.pom;*src*" ${envVarGrdlRepo}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=kaizoku"

      # - name: build_k8s_backapp_gradleV2
      #   type: Bash
      #   configuration: 
      #     environmentVariables:
      #       JFROG_CLI_LOG_LEVEL: DEBUG
      #     runtime:
      #       type: image
      #       image:
      #         custom:
      #           registry: artifactory_eu
      #           name: ${envVarDockerRegistry}/gradle
      #           tag: 6.7-jdk15-jfrog
      #           sourceRepository: ${envVarDockerRepo}
      #     inputResources:
      #       - name: src_code_k8s_backapp_gradle
      #     integrations:
      #       - name: artifactory_eu
      #     outputResources:
      #       - name: bi_k8s_backapp_gradle
      #   execution:
      #     onStart:
      #       - jfrog --version
      #       - cli_path=$(dirname "$(which jfrog)") && echo $cli_path
      #       - curl -fL https://getcli.jfrog.io | sh && ls -l           
      #       - mv ./jfrog "$cli_path/" && ls -l "$cli_path/jfrog"  && jfrog --version
      #     onExecute:
      #       - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/k8s_backapp_gradle/${run_number}/setup_env?branch=${res_src_code_k8s_backapp_gradle_branchName}"
      #       - cd ${res_src_code_k8s_backapp_gradle_resourcePath} && ls -l
      #       - git branch
      #       - git checkout ${res_src_code_k8s_backapp_gradle_branchName}
      #       - cd back/src/gs-rest-service
      #       - jfrog rt gradlec --server-id-resolve artifactory_eu --repo-resolve ${envVarGrdlRepo} --server-id-deploy artifactory_eu --repo-deploy ${envVarGrdlRepo}
      #       - ls -l .jfrog/projects 
      #       - jfrog rt gradle clean artifactoryPublish -b build.gradle --build-name=${pipeline_name} --build-number=${run_number}
      #       - jfrog rt bce ${pipeline_name} ${run_number}
      #       - jfrog rt bp ${pipeline_name} ${run_number}
      #     onSuccess:
      #       - add_run_variables runVarAppVersion=`sed -n "s/currentVersion=\(.*\)/\1/p" ${res_src_code_k8s_backapp_gradle_resourcePath}/back/src/gradle.properties`
      #       - add_run_variables runVarGitCommit=${res_src_code_k8s_backapp_gradle_commitSha}
      #       - echo $runVarAppVersion
      #       - echo $runVarGitCommit
      #       - jfrog rt sp --build=${res_bi_k8s_backapp_gradle_buildName}/${run_number}  --exclusions="*.pom;*src*" ${envVarGrdlRepo}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=kaizoku"

      - name: scan_bi_k8s_backapp_gradle
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_backapp_gradle
              trigger: true

      - name: promote_bi_k8s_backapp_gradle
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarGrdlPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: bi_k8s_backapp_gradle
              trigger: true
          inputSteps:
            - name: scan_bi_k8s_backapp_gradle
          outputResources:
            - name: bi_k8s_backapp_gradle_promoted_staging
            - name: pb_k8s_backapp_gradle
        execution:  
          onStart:
            - echo ${res_bi_k8s_backapp_gradle_buildName} 
            - echo ${res_bi_k8s_backapp_gradle_buildNumber} 
          onSuccess:
            - write_output pb_k8s_backapp_gradle appVersion=${runVarAppVersion}
            - write_output pb_k8s_backapp_gradle appCommitSHA=${runVarGitCommit}

  - name: k8s_backapp_gradle_docker
    configuration:
      environmentVariables:
        readOnly:
          envVarAppName: backapp-gradle
          envVarDockerPushRepo: kaizoku-docker
          envVarDockerRepoUrl: ${envVarDockerPushRepo}.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarDockerImageName: ${envVarDockerRepoUrl}/${envVarAppName}
          envVarDockerPromoteRepo: kaizoku-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_backapp_gradle
        execution:
          onExecute:
            # - sudo mkdir -p /etc/docker 
            # - > 
            #   sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRepoUrl}\"]}" > /etc/docker/daemon.json
            # - sudo systemctl restart docker
            # - sudo cat /etc/docker/daemon.json
            - add_run_variables runVarAppVersion=${res_pb_k8s_backapp_gradle_appVersion}
            - add_run_variables runVarAppCommitSHA=${res_pb_k8s_backapp_gradle_appCommitSHA}

      - name: build_k8s_backapp_gradle_docker
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: jfrog-Dockerfile
          dockerFileLocation: back/CI/Docker/
          dockerImageName: ${envVarDockerImageName}
          dockerImageTag: ${runVarAppVersion}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_k8s_backapp_gradle
            - name: backapp_gradle_exec
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - ls -la ${res_backapp_gradle_exec_resourcePath}
            - cp ${res_backapp_gradle_exec_resourcePath}/*.jar ${res_src_dockerfile_k8s_backapp_gradle_resourcePath}/back/CI/Docker/
            - ls -la ${res_src_dockerfile_k8s_backapp_gradle_resourcePath}/back/CI/Docker/
            - cd ${res_src_dockerfile_k8s_backapp_gradle_resourcePath}
            # get last commit on the dockerfile
            - add_run_variables runVarGitCommit=`git log -n 1 --pretty=format:%H -- back/CI/Docker/jfrog-Dockerfile`

      - name: publish_k8s_backapp_gradle_docker
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: ${envVarDockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_k8s_backapp_gradle_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_backapp_gradle_docker
        execution:
          onSuccess:
            - echo "${envVarDockerPushRepo}/${envVarAppName}/${runVarAppVersion}/manifest.json"
            - jfrog rt sp --build=${res_bi_k8s_backapp_gradle_docker_buildName}/${run_number} ${envVarDockerPushRepo}/${envVarAppName}/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

      - name: scan_k8s_backapp_gradle_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_backapp_gradle_docker
              trigger: true

      - name: promote_bi_k8s_backapp_gradle_docker
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarDockerPromoteRepo}
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_k8s_backapp_gradle_docker
              trigger: true
          inputSteps:
            - name: scan_k8s_backapp_gradle_docker
          outputResources:
            - name: bi_k8s_backapp_gradle_docker_promoted_staging
            - name: pb_k8s_backapp_gradle_docker
        execution:
          onSuccess:
            - write_output pb_k8s_backapp_gradle_docker newTag=${runVarAppVersion}
            - write_output pb_k8s_backapp_gradle_docker buildInfoName=${res_bi_k8s_backapp_gradle_docker_buildName}
            - write_output pb_k8s_backapp_gradle_docker buildInfoNumber=${run_number}

  - name: k8s_backapp_gradle_deployment
    configuration:
      environmentVariables:
        readOnly:
          envVarAppName: backapp-gradle
          envVarDockerRepo: kaizoku-docker
          envVarDockerRegistry: ${envVarDockerRepo}.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarDockerSourceRepo: kaizoku-rc-docker-local
          envVarDockerPromoteRepo: kaizoku-release-docker-local
          envVarK8SNameSpace: kaivengers
          envVarRuntimeImgName: jfrog/pipelines-u18node
          envVarRuntimeImgVers: 10.21.0-ych
          envVarHelmRepo: kaivengers-helm
          envVarHelmName: myapp
          envVarHelmVers: 1.0.0
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: deploy
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_backapp_gradle_docker
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRegistry}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl status docker
            - echo ${res_pb_k8s_backapp_gradle_docker_newTag}
            - add_run_variables runVarNewTag=${res_pb_k8s_backapp_gradle_docker_newTag}
            - add_run_variables runVarBuildName=${res_pb_k8s_backapp_gradle_docker_buildInfoName}
            - add_run_variables runVarBuildNumber=${res_pb_k8s_backapp_gradle_docker_buildInfoNumber}

      - name: deploy_helm_chart
        type: HelmDeploy
        configuration:
          environmentVariables:
            JFROG_CLI_LOG_LEVEL: DEBUG
          affinityGroup: deploy
          helmVersion: 3
          runtime:
            type: image
            image:
              custom:
                registry: artifactory_eu
                name: ${envVarDockerRegistry}/${envVarRuntimeImgName}
                tag: ${envVarRuntimeImgVers}
                sourceRepository: ${envVarDockerRepo}
          inputSteps:
            - name: setup_env
          integrations:
            - name: yann_k8s
          inputResources:
            - name: hc_my_app_backapp_gradle
          releaseName: my-super-app
          flags: "--debug --install --namespace ${envVarK8SNameSpace} --cleanup-on-fail --set images.back.tag=${runVarNewTag} --set images.back.repository=${envVarDockerRegistry}/${envVarAppName}"
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - echo ${runVarNewTag}
            - echo ${res_hc_my_app_backapp_gradle_chart}
            - echo ${res_hc_my_app_backapp_gradle_version}
            - add_run_variables runVarChartName=${res_hc_my_app_backapp_gradle_chart}
            - add_run_variables runVarChartVersion=${res_hc_my_app_backapp_gradle_version}

      - name: run_app_test
        type: Bash
        configuration:
          inputSteps:
            - name: deploy_helm_chart
        execution:
          onExecute:
            - echo running tests !!!
          onSuccess:
            - echo tests OK !!!
          onFailure:
            - echo tests KO !!!
          onComplete:
            - echo stop deployment
      - name: promote_b8s_backapp_gradle_docker_image
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
          inputSteps:
            - name: run_app_test
        execution:
          onExecute:
            - echo ${runVarChartName}
            - echo ${runVarChartVersion} 
            - >
              echo  "{\"targetRepo\" : \"${envVarDockerPromoteRepo}\",\"dockerRepository\" : \"${envVarAppName}\", \"tag\" : \"${runVarNewTag}\",\"targetTag\" : \"${runVarNewTag}\",\"copy\" : false}" > payload.json
            - cat payload.json
            # escape semi colon
            - > 
              jfrog rt curl -XPOST api/docker/${envVarDockerSourceRepo}/v2/promote -H "Content-Type: application/json" -d @payload.json
          onSuccess:
            - echo  "jfrog rt sp --build=${runVarBuildName}/${runVarBuildNumber} ${envVarDockerPromoteRepo}/${envVarAppName}/${runVarNewTag}/manifest.json \"validation.chart.name=${runVarChartName};validation.chart.version=${runVarChartVersion}\""
            - jfrog rt sp --build=${runVarBuildName}/${runVarBuildNumber} ${envVarDockerPromoteRepo}/${envVarAppName}/${runVarNewTag}/manifest.json "validation.chart.name=${runVarChartName};validation.chart.version=${runVarChartVersion}"