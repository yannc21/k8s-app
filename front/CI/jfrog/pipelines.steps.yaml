pipelines:
  - name: k8s_frontapp_npm
    configuration:
      environmentVariables:
        readOnly:
          envVarNpmRepo: avengers-npm
          envVarGenericRepo: avengers-generic
          envVarGenericPromoteRepo: avengers-rc-generic-local
    steps:
      - name: build_k8s_frontapp_npm
        type: NpmBuild
        configuration:
          npmArgs: '--no-progress --no-audit'
          affinityGroup: together
          repositoryName: ${envVarNpmRepo}
          sourceLocation: front/
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: src_code_k8s_frontapp_npm
        execution:
          onStart:
            # to inject CI URL into the build info
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/app_dotnet/${run_number}/setup_env?branch=${res_src_code_k8s_frontapp_npm_branchName}"
            # retrieved cached dependencies (stored onSucess execution)            
            - restore_cache_files npm_cache ${res_src_code_k8s_frontapp_npm_resourcePath}/node_modules
          onSuccess:
#            - appVersion=`if [[ ${res_src_code_k8s_frontapp_npm_isGitTag} == "True" ]]; then echo ${res_src_code_k8s_frontapp_npm_gitTagName}; else echo ${res_src_code_k8s_frontapp_npm_commitSha}; fi`
            - add_run_variables runVarAppVersion=`jq -r ".version" ${res_src_code_k8s_frontapp_npm_resourcePath}/front/package.json`
            - echo $runVarAppVersion
#            - add_run_variables runVarGitTag=${res_src_code_k8s_frontapp_npm_gitTagName}
            - add_run_variables runVarGitCommit=${res_src_code_k8s_frontapp_npm_commitSha}
            # cache node_modules folder for future runs
            - add_cache_files ${res_src_code_k8s_frontapp_npm_resourcePath}/front/node_modules npm_cache
            # pass front folder to next step
            - add_run_files  ${res_src_code_k8s_frontapp_npm_resourcePath}/front mySources            
            # pass JFrog CLI tmp folder to next step
            - add_run_files  /tmp/jfrog  jfrogCLI_tmp

      - name: package_and_publish_k8s_frontapp_npm
        type: Bash
        configuration:
          affinityGroup: together
          environmentVariables:
            OFFLINE_MODE: "true"
          inputSteps:
            - name: build_k8s_frontapp_npm
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_frontapp_npm
        execution:
          onStart:
            - restore_run_files mySources .
            - mkdir /tmp/jfrog 
            - restore_run_files jfrogCLI_tmp /tmp/jfrog/
            - ls -l /tmp/jfrog/
            - npm run build
          onExecute:
            - echo "Run Unit Testing ..." 
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
          onSuccess:
            - tar -czvf frontapp-${runVarAppVersion}.tar.gz build/
            - jfrog rt u frontapp-${runVarAppVersion}.tar.gz ${envVarGenericRepo}/ --build-name=k8s_frontapp_npm --build-number=${run_number}
            - jfrog rt bp k8s_frontapp_npm ${run_number}
            - jfrog rt sp --build=k8s_frontapp_npm/${run_number} ${envVarGenericRepo}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=avengers"

      - name: scan_k8s_frontapp_npm
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_frontapp_npm
              trigger: true

      - name: promote_bi_k8s_frontapp_npm
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarGenericPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputSteps:
            - name: scan_k8s_frontapp_npm
          inputResources:
            - name: bi_k8s_frontapp_npm
              trigger: true
          outputResources:
            - name: bi_k8s_frontapp_npm_promoted_staging
            - name: pb_k8s_frontapp_js            
        execution:  
          onStart:
            - echo ${res_bi_k8s_frontapp_npm_buildName} 
            - echo ${res_bi_k8s_frontapp_npm_buildNumber} 
            - echo ${runVarAppVersion}
          onSuccess:            
            - write_output pb_k8s_frontapp_js appVersion=${runVarAppVersion}
            - write_output pb_k8s_frontapp_js appCommitSHA=${runVarGitCommit}

  - name: k8s_frontapp_js_docker
    configuration:
      environmentVariables:
        readOnly:
          envVarAppName: frontapp-js
          envVarDockerPushRepo: avengers-docker
          envVarDockerRepoUrl: ${envVarDockerPushRepo}.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarDockerImageName: ${envVarDockerRepoUrl}/${envVarAppName}
          envVarDockerPromoteRepo: avengers-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_frontapp_js
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRepoUrl}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - add_run_variables runVarAppVersion=${res_pb_k8s_frontapp_js_appVersion}
            - add_run_variables runVarAppCommitSHA=${res_pb_k8s_frontapp_js_appCommitSHA}

      - name: build_k8s_frontapp_js_docker
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: Dockerfile
          dockerFileLocation: front/CI/Docker/
          dockerImageName: ${envVarDockerImageName}
          dockerImageTag: ${runVarAppVersion}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_k8s_frontapp_npm
            - name: frontapp_npm_exec
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - ls -la ${res_frontapp_npm_exec_resourcePath}
            - cp ${res_frontapp_npm_exec_resourcePath}/frontapp-${runVarAppVersion}.tar.gz ${res_src_dockerfile_k8s_frontapp_npm_resourcePath}/front/CI/Docker/app.tar.gz
            - ls -la ${res_src_dockerfile_k8s_frontapp_npm_resourcePath}/front/CI/Docker/
            - cd ${res_src_dockerfile_k8s_frontapp_npm_resourcePath}
            # get last commit on the dockerfile
            - add_run_variables runVarGitCommit=`git log -n 1 --pretty=format:%H -- front/CI/Docker/Dockerfile`
      - name: publish_k8s_frontapp_js_docker
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: ${envVarDockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_k8s_frontapp_js_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_frontapp_js_docker
        execution:
          onSuccess:
            - echo "${envVarDockerPushRepo}/${envVarAppName}/${runVarAppVersion}/manifest.json"
            - jfrog rt sp --build=${res_bi_k8s_frontapp_js_docker_buildName}/${run_number} ${envVarDockerPushRepo}/${envVarAppName}/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

      - name: scan_k8s_frontapp_js_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_frontapp_js_docker
              trigger: true

      - name: promote_bi_k8s_frontapp_js_docker
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarDockerPromoteRepo}
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_k8s_frontapp_js_docker
              trigger: true
          inputSteps:
            - name: scan_k8s_frontapp_js_docker
          outputResources:
            - name: bi_k8s_frontapp_js_docker_promoted_staging
            - name: pb_k8s_frontapp_docker
        execution:
          onSuccess:
            - write_output pb_k8s_frontapp_docker newTag=${runVarAppVersion}
            - write_output pb_k8s_frontapp_docker buildInfoName=${res_bi_k8s_frontapp_docker_buildName}
            - write_output pb_k8s_frontapp_docker buildInfoNumber=${run_number}

  - name: k8s_frontapp_js_deployment
    configuration:
      environmentVariables:
        readOnly:
          envVarAppName: frontapp-js
          envVarDockerRepo: avengers-docker
          envVarDockerRegistry: ${envVarDockerRepo}.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarDockerSourceRepo: avengers-rc-docker-local
          envVarDockerPromoteRepo: avengers-release-docker-local
          envVarK8SNameSpace: kaivengers
          envVarRuntimeImgName: jfrog/pipelines-u18node
          envVarRuntimeImgVers: 10.21.0-ych
          envVarHelmRepo: kaivengers-helm
          envVarHelmName: myapp
          envVarHelmVers: 1.0.0
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: deploy
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_frontapp_docker
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRegistry}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl status docker
            - echo ${res_pb_k8s_frontapp_docker_newTag}
            - add_run_variables runVarNewTag=${res_pb_k8s_frontapp_docker_newTag}
            - add_run_variables runVarBuildName=${res_pb_k8s_frontapp_docker_buildInfoName}
            - add_run_variables runVarBuildNumber=${res_pb_k8s_frontapp_docker_buildInfoNumber}
      - name: deploy_helm_chart
        type: HelmDeploy
        configuration:
          affinityGroup: deploy
          helmVersion: 3
          runtime:
            type: image
            image:
              custom:
                registry: artifactory_eu
                name: ${envVarDockerRegistry}/${envVarRuntimeImgName}
                tag: ${envVarRuntimeImgVers}
                sourceRepository: ${envVarDockerRepo}
          inputSteps:
            - name: setup_env
          integrations:
            - name: yann_k8s
          inputResources:
            - name: hc_my_app_frontapp_js
          releaseName: my-super-app
          flags: "--debug --install --namespace ${envVarK8SNameSpace} --cleanup-on-fail --set images.front.tag=${runVarNewTag} --set images.front.repository=${envVarDockerRegistry}/${envVarAppName}"
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - echo ${runVarNewTag}
            - echo ${res_hc_my_app_frontapp_js_chart}
            - echo ${res_hc_my_app_frontapp_js_version}
            - add_run_variables runVarChartName=${res_hc_my_app_frontapp_js_chart}
            - add_run_variables runVarChartVersion=${res_hc_my_app_frontapp_js_version}
      - name: run_app_test
        type: Bash
        configuration:
          inputSteps:
            - name: deploy_helm_chart
        execution:
          onExecute:
            - echo running tests !!!
          onSuccess:
            - echo tests OK !!!
          onFailure:
            - echo tests KO !!!
          onComplete:
            - echo stop deployment
      - name: promote_b8s_frontapp_js_docker_image
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
          inputSteps:
            - name: run_app_test
        execution:
          onExecute:
            - echo ${runVarChartName}
            - echo ${runVarChartVersion} 
            - >
              echo  "{\"targetRepo\" : \"${envVarDockerPromoteRepo}\",\"dockerRepository\" : \"${envVarAppName}\", \"tag\" : \"${runVarNewTag}\",\"targetTag\" : \"${runVarNewTag}\",\"copy\" : false}" > payload.json
            - cat payload.json
            # escape semi colon
            - > 
              jfrog rt curl -XPOST api/docker/${envVarDockerSourceRepo}/v2/promote -H "Content-Type: application/json" -d @payload.json
          onSuccess:
            - echo  "jfrog rt sp --build=${runVarBuildName}/${runVarBuildNumber} ${envVarDockerPromoteRepo}/${envVarAppName}/${runVarNewTag}/manifest.json \"validation.chart.name=${runVarChartName};validation.chart.version=${runVarChartVersion}\""
            - jfrog rt sp --build=${runVarBuildName}/${runVarBuildNumber} ${envVarDockerPromoteRepo}/${envVarAppName}/${runVarNewTag}/manifest.json "validation.chart.name=${runVarChartName};validation.chart.version=${runVarChartVersion}"